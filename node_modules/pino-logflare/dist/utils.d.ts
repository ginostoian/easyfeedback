import { LogflareUserOptionsI } from "logflare-transport-core";
declare type Level = "fatal" | "error" | "warn" | "info" | "debug" | "trace";
declare type SerializerFn = (value: any) => any;
interface Bindings {
    level?: Level | string;
    serializers?: {
        [key: string]: SerializerFn;
    };
    [key: string]: any;
}
interface LogEvent {
    ts: number;
    messages: any[];
    bindings: Bindings[];
    level: {
        label: string;
        value: number;
    };
}
declare const formatPinoBrowserLogEvent: (logEvent: LogEvent) => {
    metadata: {
        url: string;
        level: string;
        browser: boolean;
    };
    log_entry: string;
    timestamp: number;
};
declare function addLogflareTransformDirectives(item: Record<string, any>, options: LogflareUserOptionsI): Record<string, any>;
declare function toLogEntry(item: Record<string, any>): Record<string, any>;
export { toLogEntry, formatPinoBrowserLogEvent, Level, LogEvent, addLogflareTransformDirectives, };
